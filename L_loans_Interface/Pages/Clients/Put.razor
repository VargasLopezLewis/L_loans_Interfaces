@page "/putc"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager navigate
@inject NotificationService NotificationService
@using L_loans_Class

<RadzenNotification />

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Inicio" />
        <RadzenBreadCrumbItem Path="/getc" Text="Tabla de Clientes" />
        <RadzenBreadCrumbItem Icon="Manage_Accounts" Text="Actualizar un Cliente" />
    </RadzenBreadCrumb>
</div>

<h3 class="text-center mb-4">Actualizar Cliente</h3>

<div class="card shadow-lg p-4">
    @if (isLoading)
    {
        <div class="text-center">
            <RadzenSpinner />
            <p>Procesando actualización, por favor espere...</p>
        </div>
    }
    else
    {
        <EditForm Model="nuevoCliente" OnValidSubmit="EnviarFormulario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="id" class="form-label">ID:</label>
                    <InputNumber id="id" class="form-control" @bind-Value="nuevoCliente.Id" />
                    <ValidationMessage For="() => nuevoCliente.Id" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" class="form-control" @bind-Value="nuevoCliente.CNombre" />
                    <ValidationMessage For="() => nuevoCliente.CNombre" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="apellidos" class="form-label">Apellidos:</label>
                    <InputText id="apellidos" class="form-control" @bind-Value="nuevoCliente.CApellidos" />
                    <ValidationMessage For="() => nuevoCliente.CApellidos" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="edad" class="form-label">Edad:</label>
                    <InputNumber id="edad" class="form-control" @bind-Value="nuevoCliente.CEdad" />
                    <ValidationMessage For="() => nuevoCliente.CEdad" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="cedula" class="form-label">Cédula:</label>
                    <InputText id="cedula" class="form-control" @bind-Value="nuevoCliente.CCedula" />
                    <ValidationMessage For="() => nuevoCliente.CCedula" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="telefono" class="form-label">Número de Teléfono:</label>
                    <InputText id="telefono" class="form-control" @bind-Value="nuevoCliente.CNumeroDeTelefono" />
                    <ValidationMessage For="() => nuevoCliente.CNumeroDeTelefono" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="fechaRegistro" class="form-label">Fecha de Registro:</label>
                    <InputDate id="fechaRegistro" class="form-control" @bind-Value="nuevoCliente.CFechaDeRegistro" />
                    <ValidationMessage For="() => nuevoCliente.CFechaDeRegistro" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                        <label for="estado" class="form-label">Estado:</label>
                    <RadzenDropDown @bind-Value="nuevoCliente.Estado"
                                        Data="estadoOpciones"
                                        Class="form-control"
                                        Placeholder="Seleccionar Estado" />
                        <ValidationMessage For="() => nuevoCliente.Estado" class="text-danger" />
                    </div>

                <div class="col-12 mb-3">
                    <label for="descripcion" class="form-label">Descripción:</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="nuevoCliente.C_Descripcion" Rows="4" />
                    <ValidationMessage For="() => nuevoCliente.C_Descripcion" class="text-danger" />
                </div>

            </div>

            <div class="text-center">
                <RadzenButton Text="Actualizar Cliente" Icon="edit" ButtonStyle="ButtonStyle.Success" Click="ConfirmarRegistro" class="btn btn-success btn-lg" />
                <RadzenButton Text="Volver" Icon="Arrow_back" ButtonStyle="ButtonStyle.Danger" Click="atras" class="btn btn-danger btn-lg" />
            </div>
        </EditForm>

    }

    <RadzenDataGrid Data="@clientes" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@selectedClient" Style="margin-top:40px">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Cliete.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CNombre)" Title="Nombre" Frozen="true" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CApellidos)" Title="Apellidos" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CEdad)" Title="Edad" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CCedula)" Title="Cedula" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CNumeroDeTelefono)" Title="Numero de Telefono" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.CFechaDeRegistro)" Title="Fecha del Registro" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.C_Descripcion)" Title="Descripcion" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(Cliete.Estado)" Title="Estado" Width="200px" />
            <RadzenDataGridColumn TItem="Cliete">
                <Template Context="cliente">
                    <RadzenButton Text="Seleccionar" ButtonStyle="ButtonStyle.Info" Click="() => SeleccionarCliente(cliente)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


</div>

<ConfirmDialog @ref="dialog" />

@code {
    private Cliete nuevoCliente = new Cliete();
    private List<string> estadoOpciones = new List<string> { "Activo", "Inactivo" }; // Opciones de estado
    private bool isLoading = false;
    private List<Cliete> clientes;
    private IList<Cliete> selectedClient;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private async Task ShowLoadingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Cargando...");
        await Task.Delay(3000); // call the service/api
        PreloadService.Hide();
    }

    private ConfirmDialog dialog = default!;

    private async Task ConfirmarRegistro()
    {
        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro de que desea Actualizar este cliente?",
            message1: "Este cliente será Actualizado a la base de datos.",
            message2: "¿Desea proceder?"
        );

        if (confirmation)
        {
            await EnviarFormulario();
        }
        else
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ShowLoadingDataAsync();
        clientes = await Http.GetFromJsonAsync<List<Cliete>>("https://localhost:7261/api/Clientes");
    }

    private async Task EnviarFormulario()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (nuevoCliente == null || nuevoCliente.Id == 0 || nuevoCliente.CNombre == "" || nuevoCliente.CCedula == "")
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Revise el registro y compruebe los datos", Duration = 4000 });
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7261/api/Clientes?iD={nuevoCliente.Id}", nuevoCliente);

                if (response.IsSuccessStatusCode)
                {
                    ResetForm();
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Registro actualizado correctamente", Duration = 4000 });
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo completar la actualización", Duration = 4000 });
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        nuevoCliente = new Cliete();
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void atras()
    {
        navigate.NavigateTo("/getc");
    }

    private void SeleccionarCliente(Cliete cliente)
    {
        nuevoCliente = cliente;  
    }

}
