@page "/postc"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager navigate
@inject NotificationService NotificationService
@using L_loans_Class


<RadzenNotification />

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Inicio" />
        <RadzenBreadCrumbItem Path="/getc" Text="Tabla de Clientes" />
        <RadzenBreadCrumbItem Icon="Person_Add" Text="Agregar un Cliente" />
    </RadzenBreadCrumb>
</div>

<h3 class="text-center mb-4">Formulario de Registro de Cliente</h3>

<div class="card shadow-lg p-4">
    @if (isLoading)
    {
        <div class="text-center">
            <RadzenSpinner />
            <p>Procesando registro, por favor espere...</p>
        </div>
    }
    else
    {
        <EditForm Model="nuevoCliente" OnValidSubmit="EnviarFormulario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" class="form-control" @bind-Value="nuevoCliente.CNombre" />
                    <ValidationMessage For="() => nuevoCliente.CNombre" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="apellidos" class="form-label">Apellidos:</label>
                    <InputText id="apellidos" class="form-control" @bind-Value="nuevoCliente.CApellidos" />
                    <ValidationMessage For="() => nuevoCliente.CApellidos" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="edad" class="form-label">Edad:</label>
                    <InputNumber id="edad" class="form-control" @bind-Value="nuevoCliente.CEdad" />
                    <ValidationMessage For="() => nuevoCliente.CEdad" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="cedula" class="form-label">Cédula:</label>
                    <InputText id="cedula" class="form-control" @bind-Value="nuevoCliente.CCedula" />
                    <ValidationMessage For="() => nuevoCliente.CCedula" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="telefono" class="form-label">Número de Teléfono:</label>
                    <InputText id="telefono" class="form-control" @bind-Value="nuevoCliente.CNumeroDeTelefono" />
                    <ValidationMessage For="() => nuevoCliente.CNumeroDeTelefono" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="fechaRegistro" class="form-label">Fecha de Registro:</label>
                    <InputDate id="fechaRegistro" class="form-control" @bind-Value="nuevoCliente.CFechaDeRegistro" />
                    <ValidationMessage For="() => nuevoCliente.CFechaDeRegistro" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="estado" class="form-label">Estado:</label>
                    <RadzenDropDown @bind-Value="nuevoCliente.Estado"
                                    Data="estadoOpciones"
                                    Class="form-control"
                                    Placeholder="Seleccionar Estado" />
                    <ValidationMessage For="() => nuevoCliente.Estado" class="text-danger" />
                </div>

                <div class="col-12 mb-3">
                    <label for="descripcion" class="form-label">Descripción:</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="nuevoCliente.C_Descripcion" Rows="4" />
                    <ValidationMessage For="() => nuevoCliente.C_Descripcion" class="text-danger" />
                </div>
            </div>

            <div class="text-center">
                <RadzenButton Text="Registrar Cliente" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Click="ConfirmarRegistro" class="btn btn-success btn-lg" />
                <RadzenButton Text="Volver" Icon="Arrow_back" ButtonStyle="ButtonStyle.Danger" Click="atras" class="btn btn-success btn-lg" />
            </div>
        </EditForm>
    }
</div>

<ConfirmDialog @ref="dialog" />

@code {
    private Cliete nuevoCliente = new Cliete();
    private bool isLoading = false;
    private List<string> estadoOpciones = new List<string> { "Activo", "Inactivo" };

    private ConfirmDialog dialog = default!;

    private async Task ConfirmarRegistro()
    {
        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro de que desea registrar este cliente?",
            message1: "Este cliente será agregado a la base de datos.",
            message2: "¿Desea proceder?"
        );

        if (confirmation)
        {
            await EnviarFormulario();
        }
        else
        {
            // Acción si se cancela la confirmación
        }
    }

    private async Task EnviarFormulario()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (nuevoCliente == null)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Revise el registro y compruebe los datos", Duration = 4000 });
            }
            else if (nuevoCliente.CEdad <= 17)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "La Edad que ingresaste debe ser mayor de 18 años", Duration = 4000 });
            }
            else
            {
                var response = await Http.PostAsJsonAsync("https://localhost:7261/api/Clientes", nuevoCliente);

                if (response.IsSuccessStatusCode)
                {
                    ResetForm();
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Registro Completado Correctamente", Duration = 4000 });
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo completar el registro", Duration = 4000 });
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        nuevoCliente = new Cliete();
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void atras()
    {
        navigate.NavigateTo("/getc");
    }
}

