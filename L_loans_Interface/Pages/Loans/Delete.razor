@page "/deletep"
@inject HttpClient Http
@inject NavigationManager navigate
@inject NotificationService NotificationService
@using L_loans_Class
@using Radzen
@using BlazorBootstrap

<RadzenNotification />

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Inicio" />
        <RadzenBreadCrumbItem Path="/getp" Text="Tabla de Préstamos" />
        <RadzenBreadCrumbItem Icon="delete" Text="Eliminar un Préstamo" />
    </RadzenBreadCrumb>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100px;">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        <span class="ms-3">Procesando, por favor espere...</span>
    </div>
}
else
{
    <EditForm Model="form" OnValidSubmit="(() => DeletePrestamo(form.Id))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Id" class="form-label">Id del Préstamo:</label>
                <InputNumber id="Id" class="form-control" @bind-Value="form.Id" />
                <ValidationMessage For="() => form.Id" class="text-danger" />
            </div>
            <div class="col-md-6 mb-3">
                <RadzenButton Text="Eliminar Préstamo" Style="margin-top:33px" Icon="delete" ButtonStyle="ButtonStyle.Success" Click="ConfirmarRegistro" class="btn btn-danger btn-lg" />
                <RadzenButton Text="Volver" Icon="Arrow_back" Style="margin-top:33px" ButtonStyle="ButtonStyle.Danger" Click="atras" class="btn btn-primary btn-lg" />
            </div>
        </div>
    </EditForm>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@prestamos" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPrestamos Style="margin-top:40px">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Prestamo.Id)" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Monto)" Title="Monto" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Interes)" Title="Interés" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.FechaDeInicio)" Title="Fecha de Inicio" FormatString="{0:d}" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.DuracionDelPrestamo)" Title="Duración" FormatString="{0:d}" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Estado)" Title="Estado" Width="200px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Deuda_Restante)" Title="Deuda Restante" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Mora)" Title="Mora" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Prestamo.Tipo_de_cuota)" Title="Tipo de Cuota" Width="120px" />

        </Columns>
    </RadzenDataGrid>
}

<ConfirmDialog @ref="dialog" />

@code {
    private Prestamo form = new Prestamo();
    private List<Prestamo> prestamos;
    private IList<Prestamo> selectedPrestamos;
    private bool isLoading = false;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private async Task ShowLoadingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Cargando...");
        await Task.Delay(3000); // call the service/api
        PreloadService.Hide();
    }

    private ConfirmDialog dialog = default!;

    private async Task ConfirmarRegistro()
    {
        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro de que desea Eliminar este Registro?",
            message1: "Este Registro será Eliminado a la base de datos.",
            message2: "¿Desea proceder?"
        );

        if (confirmation)
        {
            await DeletePrestamo(form.Id);
        }
        else
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ShowLoadingDataAsync();
        await CargarPrestamos();
    }

    private async Task CargarPrestamos()
    {
        try
        {
            prestamos = await Http.GetFromJsonAsync<List<Prestamo>>("https://localhost:7261/api/Prestamos");
            selectedPrestamos = new List<Prestamo>() { prestamos.FirstOrDefault() };
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"No se pudieron cargar los datos: {ex.Message}",
                    Duration = 5000
                });
        }
    }

    private async Task DeletePrestamo(int prestamoId)
    {
        if (prestamoId <= 0)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Error",
                    Detail = "Debe proporcionar un ID válido para eliminar.",
                    Duration = 4000
                });
            return;
        }

        isLoading = true;
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7261/api/Prestamos?iD={prestamoId}");
            if (response.IsSuccessStatusCode)
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Éxito",
                        Detail = "Préstamo eliminado correctamente.",
                        Duration = 4000
                    });
                await CargarPrestamos(); // Refresca la lista de préstamos
            }
            else
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"No se pudo eliminar el préstamo. Código de estado: {response.StatusCode}",
                        Duration = 5000
                    });
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Ocurrió un error al intentar eliminar el préstamo: {ex.Message}",
                    Duration = 5000
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void atras()
    {
        navigate.NavigateTo("/getp");
    }
}
