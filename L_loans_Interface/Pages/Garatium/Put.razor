@page "/putg"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager navigate
@inject NotificationService NotificationService
@using L_loans_Class

<RadzenNotification />

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Inicio" />
        <RadzenBreadCrumbItem Path="/getg" Text="Tabla de Garantías" />
        <RadzenBreadCrumbItem Icon="Settings" Text="Actualizar un Garantía" />
    </RadzenBreadCrumb>
</div>

<h3 class="text-center mb-4">Actualizar Garantía</h3>

<div class="card shadow-lg p-4">
    @if (isLoading)
    {
        <div class="text-center">
            <RadzenSpinner />
            <p>Procesando actualización, por favor espere...</p>
        </div>
    }
    else
    {
        <EditForm Model="nuevoGarantium" OnValidSubmit="EnviarFormulario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="id" class="form-label">ID:</label>
                    <InputNumber id="id" class="form-control" @bind-Value="nuevoGarantium.Id" />
                    <ValidationMessage For="() => nuevoGarantium.Id" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="tipoDeGarantia" class="form-label">Tipo de Garantía:</label>
                     <RadzenDropDown @bind-Value="nuevoGarantium.TipoDeGarantia"
                                    Data="tipoOpciones"
                                    class="form-control" 
                                    PlaceHolder="Seleccionar Tipo de Garantia"/>
                    <ValidationMessage For="() => nuevoGarantium.TipoDeGarantia" class="text-danger" /> 
                </div>

                <div class="col-md-6 mb-3">
                    <label for="descripcion" class="form-label">Descripción:</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="nuevoGarantium.Descripcion" />
                    <ValidationMessage For="() => nuevoGarantium.Descripcion" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="valorEstimado" class="form-label">Valor Estimado:</label>
                    <CurrencyInput Decimals="2" TValue="decimal?" id="valorEstimado" class="form-control" @bind-Value="nuevoGarantium.ValorEstimado" />
                    <ValidationMessage For="() => nuevoGarantium.ValorEstimado" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="descripcion" class="form-label">Estado:</label>
                    <RadzenDropDown @bind-Value="nuevoGarantium.Estado"
                                    Data="estadoOpciones"
                                    Class="form-control"
                                    Placeholder="Seleccionar Estado" />
                    <ValidationMessage For="() => nuevoGarantium.Estado" class="text-danger" />
                </div>

            </div>

            <div class="text-center">
                <RadzenButton Text="Actualizar Garantía" Icon="edit" ButtonStyle="ButtonStyle.Success" Click="ConfirmarRegistro" class="btn btn-success btn-lg" />
                <RadzenButton Text="Volver" Icon="Arrow_back" ButtonStyle="ButtonStyle.Danger" Click="atras" class="btn btn-danger btn-lg" />
            </div>
        </EditForm>
    }

    <RadzenDataGrid Data="@garantias" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@selectedGarantium" Style="margin-top:40px">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Garantium.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Garantium.PId)" Title="Id del Prestamo" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Garantium.TipoDeGarantia)" Title="Tipo de Garantía" Frozen="true" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Garantium.Descripcion)" Title="Descripción" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(Garantium.ValorEstimado)" Title="Valor Estimado" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Garantium.Estado)" Title="Estado" Width="160px" />
            <RadzenDataGridColumn TItem="Garantium">
                <Template Context="garantia">
                    <RadzenButton Text="Seleccionar" ButtonStyle="ButtonStyle.Info" Click="() => SeleccionarGarantium(garantia)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<ConfirmDialog @ref="dialog" />

@code {
    private Garantium nuevoGarantium = new Garantium();
    private bool isLoading = false;
    private List<Garantium> garantias;
    private IList<Garantium> selectedGarantium;
    private List<string> tipoOpciones = new List<string> { "Vehiculo", "Tegnologia" ,"inmueble" }; // Opciones de estado
    private List<string> estadoOpciones = new List<string> { "Activo", "Inactivo" }; // Opciones de estado

    protected override async Task OnInitializedAsync()
    {
        await ShowLoadingDataAsync();
        garantias = await Http.GetFromJsonAsync<List<Garantium>>("https://localhost:7261/api/Garantia");
    }

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private async Task ShowLoadingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Cargando...");
        await Task.Delay(3000); // call the service/api
        PreloadService.Hide();
    }

    private ConfirmDialog dialog = default!;

    private async Task ConfirmarRegistro()
    {
        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro de que desea Actualizar este Prestamo?",
            message1: "Este Prestamo será Actualizado a la base de datos.",
            message2: "¿Desea proceder?"
        );

        if (confirmation)
        {
            await EnviarFormulario();
        }
        else
        {
        }
    }
    private async Task EnviarFormulario()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (nuevoGarantium == null || nuevoGarantium.Id == 0 || nuevoGarantium.TipoDeGarantia == "" || nuevoGarantium.ValorEstimado <= 0)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Revise el registro y compruebe los datos", Duration = 4000 });
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7261/api/Garantia?iD={nuevoGarantium.Id}", nuevoGarantium);

                if (response.IsSuccessStatusCode)
                {
                    ResetForm();
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Registro actualizado correctamente", Duration = 4000 });
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo completar la actualización", Duration = 4000 });
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        nuevoGarantium = new Garantium();
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void atras()
    {
        navigate.NavigateTo("/getg");
    }

    private void SeleccionarGarantium(Garantium garantia)
    {
        nuevoGarantium = garantia;  
    }
}
