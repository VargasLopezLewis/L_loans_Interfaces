@page "/postg"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager navigate
@inject NotificationService NotificationService
@using L_loans_Class

<RadzenNotification />

<div class="rz-m-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Inicio" />
        <RadzenBreadCrumbItem Path="/getg" Text="Tabla de Garantias" />
        <RadzenBreadCrumbItem Icon="Directions_Car" Text="Agregar un Garantia" />
    </RadzenBreadCrumb>
</div>

<h3 class="text-center mb-4">Formulario de Registro de Garantia</h3>

<div class="card shadow-lg p-4">
    @if (isLoading)
    {
        <div class="text-center">
            <RadzenSpinner />
            <p>Procesando registro, por favor espere...</p>
        </div>
    }
    else
    {
        <EditForm Model="nuevaGarantia" OnValidSubmit="EnviarFormulario">
            <DataAnnotationsValidator />
            <ValidationSummary />


            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="tipoGarantia" class="form-label">Id del Prestamo:</label>
                    <InputNumber id="PId" class="form-control" @bind-Value="nuevaGarantia.PId" />
                    <ValidationMessage For="() => nuevaGarantia.PId" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="tipoGarantia" class="form-label">Tipo de Garantia:</label>
                    <RadzenDropDown @bind-Value="nuevaGarantia.TipoDeGarantia"
                                    Data="tipoOpciones"
                                    class="form-control" 
                                    PlaceHolder="Seleccionar Tipo de Garantia"/>
                    <ValidationMessage For="() => nuevaGarantia.TipoDeGarantia" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="descripcion" class="form-label">Descripcion:</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="nuevaGarantia.Descripcion" />
                    <ValidationMessage For="() => nuevaGarantia.Descripcion" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="estado" class="form-label">Estado:</label>
                    <RadzenDropDown @bind-Value="nuevaGarantia.Estado"
                                    Data="estadoOpciones"
                                    Class="form-control"
                                    Placeholder="Seleccionar Estado" />
                    <ValidationMessage For="() => nuevaGarantia.Estado" class="text-danger" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="valorEstimado" class="form-label">Valor Estimado:</label>
                    <CurrencyInput Decimals="2" id="valorEstimado" class="form-control" @bind-Value="nuevaGarantia.ValorEstimado" />
                    <ValidationMessage For="() => nuevaGarantia.ValorEstimado" class="text-danger" />
                </div>
            </div>

            <div class="text-center">
                <RadzenButton Text="Registrar Garantia" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Click="ConfirmarRegistro" class="btn btn-success btn-lg" />
                <RadzenButton Text="Volver" Icon="Arrow_back" ButtonStyle="ButtonStyle.Danger" Click="atras" class="btn btn-success btn-lg" />
            </div>
        </EditForm>
    }
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@prestamos" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPrestamos Style="margin-top:40px">
    <Columns>

        <RadzenDataGridColumn Property="@nameof(Prestamo.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.CId)" Title="ID de Cliente" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Monto)" Title="Monto" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Interes)" Title="Interés" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.FechaDeInicio)" Title="Fecha de Inicio" FormatString="{0:d}" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.DuracionDelPrestamo)" Title="Duración" FormatString="{0:d}" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Estado)" Title="Estado" Width="120px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Deuda_Restante)" Title="Deuda Restante" Width="120px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Mora)" Title="Mora" Width="120px" />
        <RadzenDataGridColumn Property="@nameof(Prestamo.Tipo_de_cuota)" Title="Tipo de Cuota" Width="120px" />

    </Columns>
</RadzenDataGrid>
</div>

<ConfirmDialog @ref="dialog" />

@code {
    private Garantium nuevaGarantia = new Garantium();
    private List<Prestamo> prestamos;
    private IList<Prestamo> selectedPrestamos;
    private bool isLoading = false;
    private List<string> estadoOpciones = new List<string> { "Activo", "Inactivo" }; // Opciones de estado
    private List<string> tipoOpciones = new List<string> { "Vehiculo", "Tegnologia" ,"inmueble" }; // Opciones de estado
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private async Task ShowLoadingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Cargando...");
        await Task.Delay(3000); // call the service/api
        PreloadService.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        await ShowLoadingDataAsync();
        prestamos = await Http.GetFromJsonAsync<List<Prestamo>>("https://localhost:7261/api/Prestamos");
    }

    private ConfirmDialog dialog = default!;

    private async Task ConfirmarRegistro()
    {
        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro de que desea Ingresar este Prestamo?",
            message1: "Este Prestamo será agregado a la base de datos.",
            message2: "¿Desea proceder?"
        );

        if (confirmation)
        {
            await EnviarFormulario();
        }
        else
        {
        }
    }

    private async Task EnviarFormulario()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (nuevaGarantia == null)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Revise el registro y compruebe los datos e inténtelo de nuevo", Duration = 4000 });
            }
            else
            {
                var response = await Http.PostAsJsonAsync("https://localhost:7261/api/Garantia", nuevaGarantia);

                if (response.IsSuccessStatusCode)
                {
                    ResetForm();
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Registro Completado Correctamente", Duration = 4000 });
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo completar el registro", Duration = 4000 });
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = ex.Message, Duration = 4000 });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        nuevaGarantia = new Garantium();
    }

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void atras()
    {
        navigate.NavigateTo("/getg");
    }
}
